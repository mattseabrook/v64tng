#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer InRGB {
    uint data[];
};

layout(binding = 1, rgba8) uniform writeonly image2D outImage;

layout(push_constant) uniform PC {
    uint width;
    uint height;
} pc;

// Load a single byte from the packed uint[] array
uint loadByte(uint index)
{
    uint word = data[index >> 2];
    uint shift = (index & 3u) * 8u;
    return (word >> shift) & 0xFFu;
}

void main()
{
    uvec2 gid = gl_GlobalInvocationID.xy;
    if (gid.x >= pc.width || gid.y >= pc.height) return;
    uint pixIndex = gid.y * pc.width + gid.x;
    uint base = pixIndex * 3u;
    float r = float(loadByte(base + 0u)) / 255.0;
    float g = float(loadByte(base + 1u)) / 255.0;
    float b = float(loadByte(base + 2u)) / 255.0;
    // Write logical RGBA; bound image is BGRA8, driver will map channels
    imageStore(outImage, ivec2(gid), vec4(r, g, b, 1.0));
}
