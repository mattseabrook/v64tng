// music.cpp

#include <cstring>
#include <vector>
#include <cstdint>
#include <string>
#include <fstream>
#include <span>
#include <bit>
#include <algorithm>
#include <array>
#include <iostream>
#include <thread>
#include <chrono>
#include <queue>

// Windows Multimedia
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <Audioclient.h>
#include <Mmdeviceapi.h>
#include <functiondiscoverykeys_devpkey.h>

#include <adlmidi.h> // MIDI Library

#include "game.h"
#include "music.h"
#include "rl.h"

namespace
{
	//
	// Reads a Big-Endian value from a span and advances the span
	// (UPDATED Signature and Implementation for uint8_t)
	//
	template <typename T>
		requires std::is_integral_v<T> || std::is_enum_v<T> // C++20 concept
	T read_be(std::span<const uint8_t> &data)				// CHANGED: Takes uint8_t span
	{
		T value;
		// Assumes data.size() >= sizeof(T)
		std::memcpy(&value, data.data(), sizeof(T)); // Use memcpy for type-punning safety
		data = data.subspan(sizeof(T));

		if constexpr (std::endian::native == std::endian::little && sizeof(T) > 1)
		{
			return std::byteswap(value);
		}
		else
		{
			return value;
		}
	}

	//
	// Writes a Big-Endian value to a vector
	// (UPDATED Signature and Implementation for uint8_t)
	//
	template <typename T>
		requires std::is_integral_v<T> || std::is_enum_v<T>
	void write_be(std::vector<uint8_t> &out, T value) // CHANGED: Takes uint8_t vector
	{
		if constexpr (std::endian::native == std::endian::little && sizeof(T) > 1)
		{
			value = std::byteswap(value);
		}
		// Get pointer to the value's bytes as uint8_t* and insert
		const uint8_t *byte_ptr = reinterpret_cast<const uint8_t *>(&value);
		out.insert(out.end(), byte_ptr, byte_ptr + sizeof(T));
	}

	//
	// Writes a Variable Length Quantity (MIDI standard)
	// (UPDATED Signature and Implementation for uint8_t)
	//
	void write_vlq(std::vector<uint8_t> &out, uint32_t value) // CHANGED: Takes uint8_t vector
	{
		uint8_t buffer[5];
		size_t bytes_written = 0;
		do
		{
			buffer[bytes_written++] = static_cast<uint8_t>(value & 0x7F);
			value >>= 7;
		} while (value > 0);

		if (bytes_written == 0)
		{
			out.push_back(uint8_t{0x00}); // Push uint8_t literal
		}
		else
		{
			for (size_t i = bytes_written; i > 0; --i)
			{
				// Push uint8_t literal, casting result of bitwise op
				out.push_back(static_cast<uint8_t>(buffer[i - 1] | ((i == 1) ? 0x00 : 0x80)));
			}
		}
	}

	//
	// Reads XMI's specific variable-length format (sequence of 0x7F bytes + final byte)
	// (UPDATED Signature and Implementation for uint8_t)
	//
	uint32_t read_xmi_delta(std::span<const uint8_t> &data) // CHANGED: Takes uint8_t span
	{
		uint32_t delta = 0;
		// Assumes data is non-empty when needed
		while (data.front() == uint8_t{0x7F}) // Compare with uint8_t literal
		{
			delta += 0x7F; // Add the int literal value
			data = data.subspan(1);
		}
		delta += data.front(); // Directly add the uint8_t value
		data = data.subspan(1);
		return delta;
	}

	//
	// Structure to hold pending Note Off events (similar to original NOEVENTS)
	// (UPDATED to use uint8_t array)
	//
	struct PendingNoteOff
	{
		uint32_t delta_ticks;
		std::array<uint8_t, 3> event_data; // CHANGED: Uses uint8_t array

		bool operator>(const PendingNoteOff &other) const
		{
			return delta_ticks > other.delta_ticks;
		}
	};

	//
	// Constants (Unchanged)
	//
	constexpr uint32_t MIDI_HEADER_SIZE = 14;
	constexpr uint32_t MIDI_TRACK_HEADER_SIZE = 8;
	constexpr uint16_t MIDI_FORMAT = 0;
	constexpr uint16_t MIDI_NUM_TRACKS = 1;
	constexpr uint16_t MIDI_TIMEBASE = 960;
	constexpr uint32_t DEFAULT_TEMPO_BPM = 120;
	constexpr uint32_t DEFAULT_MICROSECS_PER_QN = (60 * 1000000) / DEFAULT_TEMPO_BPM;
	constexpr uint32_t XMI_FREQ = 120;
	constexpr uint32_t DEFAULT_TIMEBASE = (XMI_FREQ * 60) / DEFAULT_TEMPO_BPM; // 60
	constexpr uint32_t DEFAULT_QN = (60 * 1000000) / DEFAULT_TEMPO_BPM;
}

/*
===============================================================================
Function Name: xmiConverter (Refactored - Lean)

Description:
	- Converts XMI data (read from RLEntry within XMI.GJD) to a standard
	  MIDI Format 0 file in memory.

Parameters:
	- const RLEntry& song: Specifies the offset and length of the XMI song
						   data within the "XMI.GJD" file container.

Return:
	- std::vector<uint8_t>: The converted MIDI data in memory.
===============================================================================
*/
std::vector<uint8_t> xmiConverter(const RLEntry &song)
{
	std::vector<uint8_t> xmi_file_buffer(song.length);
	{
		std::ifstream xmi_stream("XMI.GJD", std::ios::binary);
		if (!xmi_stream)
		{
			// Handle error: could not open file
			std::cerr << "Error: Could not open XMI.GJD" << std::endl;
			return {};
		}
		xmi_stream.seekg(song.offset, std::ios::beg);
		if (!xmi_stream)
		{
			// Handle error: seek failed
			std::cerr << "Error: Could not seek to offset " << song.offset << " in XMI.GJD" << std::endl;
			return {};
		}
		xmi_stream.read(reinterpret_cast<char *>(xmi_file_buffer.data()), song.length);
		if (!xmi_stream)
		{
			// Handle error: read failed (maybe read less than song.length?)
			std::cerr << "Error: Could not read " << song.length << " bytes from offset " << song.offset << " in XMI.GJD" << std::endl;
			// Optionally return partial data if applicable, or empty vector on error
			return {};
		}
	}
	std::span<const uint8_t> xmi_data = xmi_file_buffer;

	// --- Start of MIDI conversion logic adapted from previous versions ---

	std::vector<uint8_t> midi_track;
	midi_track.reserve(xmi_data.size() * 2);

	std::vector<uint8_t> midi_header;
	midi_header.reserve(MIDI_HEADER_SIZE);
	write_be(midi_header, uint32_t{'MThd'});
	write_be(midi_header, uint32_t{6});
	write_be(midi_header, uint16_t{0});
	write_be(midi_header, uint16_t{1});
	write_be(midi_header, uint16_t{MIDI_TIMEBASE});

	write_be(midi_track, uint32_t{'MTrk'});
	size_t track_size_offset = midi_track.size();
	write_be(midi_track, uint32_t{0});

	write_vlq(midi_track, 0);
	midi_track.insert(midi_track.end(), {uint8_t{0xFF}, uint8_t{0x54}, uint8_t{0x05},
										 uint8_t{0x60}, uint8_t{0x00}, uint8_t{0x00}, uint8_t{0x00}, uint8_t{0x00}});

	uint32_t current_ticks = 0;
	uint32_t xmi_timebase = DEFAULT_TIMEBASE;
	uint32_t microseconds_per_qn = DEFAULT_MICROSECS_PER_QN;

	std::priority_queue<PendingNoteOff, std::vector<PendingNoteOff>, std::greater<PendingNoteOff>> pending_note_offs;

	write_vlq(midi_track, 0);
	write_be(midi_track, uint8_t{0xFF});
	write_be(midi_track, uint8_t{0x58});
	write_be(midi_track, uint8_t{0x04});
	write_be(midi_track, uint8_t{4});
	write_be(midi_track, uint8_t{2});
	write_be(midi_track, uint8_t{24});
	write_be(midi_track, uint8_t{8});

	write_vlq(midi_track, 0);
	write_be(midi_track, uint8_t{0xFF});
	write_be(midi_track, uint8_t{0x51});
	write_be(midi_track, uint8_t{0x03});
	write_be(midi_track, uint8_t{(microseconds_per_qn >> 16) & 0xFF});
	write_be(midi_track, uint8_t{(microseconds_per_qn >> 8) & 0xFF});
	write_be(midi_track, uint8_t{microseconds_per_qn & 0xFF});

	uint8_t running_status = 0;
	bool processing_active = true;
	while (!xmi_data.empty() && processing_active)
	{
		uint32_t xmi_delta = read_xmi_delta(xmi_data);
		uint32_t delta_ticks = (uint32_t)((uint64_t)xmi_delta * MIDI_TIMEBASE / xmi_timebase);
		current_ticks += delta_ticks;

		uint32_t last_event_tick = current_ticks - delta_ticks;
		while (!pending_note_offs.empty() && pending_note_offs.top().delta_ticks <= current_ticks)
		{
			PendingNoteOff note_off = pending_note_offs.top();
			pending_note_offs.pop();
			uint32_t note_off_midi_delta = note_off.delta_ticks - last_event_tick;
			last_event_tick = note_off.delta_ticks;
			write_vlq(midi_track, note_off_midi_delta);
			midi_track.insert(midi_track.end(), note_off.event_data.begin(), note_off.event_data.end());
			if (!note_off.event_data.empty())
			{
				running_status = note_off.event_data[0];
			}
		}

		uint32_t current_event_midi_delta = current_ticks - last_event_tick;
		write_vlq(midi_track, current_event_midi_delta);

		if (xmi_data.empty())
		{
			processing_active = false;
			break;
		}
		uint8_t status = read_be<uint8_t>(xmi_data);
		uint8_t event_type = status & 0xF0;
		uint8_t channel = status & 0x0F;

		bool use_running_status = (status < 0x80);
		if (use_running_status)
		{
			if (running_status == 0 || running_status >= 0xF0)
			{
				std::cerr << "Error: Invalid running status usage or unexpected data byte.\n";
				processing_active = false;
				break;
			}
			status = running_status;
			event_type = status & 0xF0;
			channel = status & 0x0F;

			// No need to "unread" the byte, just don't write status below
			// Ensure data read below correctly uses the byte originally read as status.
			// The read_be calls below handle this naturally by reading the *next* byte.
			// Need to account for the first data byte being the one we read as status.
			// This part requires careful handling based on how read_be interacts with the span.
			// Assuming read_be consumes the byte it reads.
			// Let's adjust the read logic within the switch cases for running status.
		}
		else
		{
			// Only write status if it wasn't running status
			write_be(midi_track, status);
			if (status < 0xF0)
			{ // Update running status only for channel messages
				running_status = status;
			}
			else
			{
				running_status = 0; // Meta/Sysex cancel running status
			}
		}

		switch (event_type)
		{
		case 0x80:
		case 0x90:
		case 0xA0:
		case 0xB0:
		case 0xE0:
		{
			uint8_t data1;
			if (use_running_status)
			{
				// The 'status' byte we peeked at earlier is actually data1
				// Need to "consume" it from the span effectively
				// Let's re-read it formally if read_be advances span
				data1 = read_be<uint8_t>(xmi_data); // Reads the byte we already saw
			}
			else
			{
				if (xmi_data.empty())
				{
					processing_active = false;
					break;
				}
				data1 = read_be<uint8_t>(xmi_data);
				write_be(midi_track, data1);
			}

			if (xmi_data.empty())
			{
				processing_active = false;
				break;
			}
			uint8_t data2 = read_be<uint8_t>(xmi_data);
			write_be(midi_track, data2);

			if (event_type == 0x90 && data2 != 0)
			{
				if (xmi_data.empty())
				{
					processing_active = false;
					break;
				}
				uint32_t note_duration_xmi = read_xmi_delta(xmi_data);
				uint32_t note_duration_ticks = (uint32_t)((uint64_t)note_duration_xmi * MIDI_TIMEBASE / xmi_timebase);
				std::array<uint8_t, 3> note_off_event = {
					(uint8_t)(0x80 | channel), data1, 0x40};
				pending_note_offs.push({current_ticks + note_duration_ticks, note_off_event});
			}
			break;
		}
		case 0xC0:
		case 0xD0:
		{
			uint8_t data1;
			if (use_running_status)
			{
				data1 = read_be<uint8_t>(xmi_data); // Reads the byte we already saw
			}
			else
			{
				if (xmi_data.empty())
				{
					processing_active = false;
					break;
				}
				data1 = read_be<uint8_t>(xmi_data);
				write_be(midi_track, data1);
			}
			break;
		}
		default:
			if (status >= 0xF0)
			{
				running_status = 0; // Meta/Sysex cancel running status

				if (status == 0xFF)
				{
					if (xmi_data.empty())
					{
						processing_active = false;
						break;
					}
					uint8_t meta_type = read_be<uint8_t>(xmi_data);
					write_be(midi_track, meta_type);

					if (xmi_data.empty())
					{
						processing_active = false;
						break;
					}
					uint32_t meta_len = read_xmi_delta(xmi_data);
					write_vlq(midi_track, meta_len);

					for (uint32_t i = 0; i < meta_len; ++i)
					{
						if (xmi_data.empty())
						{
							processing_active = false;
							break;
						}
						write_be(midi_track, read_be<uint8_t>(xmi_data));
					}
					if (!processing_active)
						break; // Check break from inner loop

					if (meta_type == 0x51 && meta_len == 3)
					{
						size_t tempo_offset = midi_track.size() - 3;
						microseconds_per_qn = (uint32_t(midi_track[tempo_offset]) << 16) |
											  (uint32_t(midi_track[tempo_offset + 1]) << 8) |
											  uint32_t(midi_track[tempo_offset + 2]);
					}
					else if (meta_type == 0x2F)
					{
						processing_active = false; // End of Track found
					}
				}
				else if (status == 0xF0 || status == 0xF7)
				{
					if (xmi_data.empty())
					{
						processing_active = false;
						break;
					}
					uint32_t sysex_len = read_xmi_delta(xmi_data);
					write_vlq(midi_track, sysex_len);

					for (uint32_t i = 0; i < sysex_len; ++i)
					{
						if (xmi_data.empty())
						{
							processing_active = false;
							break;
						}
						write_be(midi_track, read_be<uint8_t>(xmi_data));
					}
					if (!processing_active)
						break; // Check break from inner loop
				}
				else
				{
					std::cerr << "Warning: Unknown MIDI status >= 0xF0 encountered: " << std::hex << (int)status << std::dec << std::endl;
					processing_active = false; // Stop on unknown Fx status
				}
			}
			else
			{
				std::cerr << "Error: Unexpected status byte processing logic failure.\n";
				processing_active = false; // Should not happen
			}
			break;
		}
		if (!processing_active)
			break; // Break out of switch if needed
	} // End while loop

	// Add final End of Track only if processing didn't stop due to finding one already
	bool found_eot = false;
	if (midi_track.size() >= 3)
	{
		size_t end_offset = midi_track.size() - 3;
		if (midi_track[end_offset] == 0xFF && midi_track[end_offset + 1] == 0x2F && midi_track[end_offset + 2] == 0x00)
		{
			// Basic check - assumes 0 delta before it. A robust check is harder.
			found_eot = true;
		}
	}
	// Add EOT if processing finished normally (not stopped by finding EOT) and EOT wasn't the last event
	if (processing_active && !found_eot)
	{
		write_vlq(midi_track, 0);
		write_be(midi_track, uint8_t{0xFF});
		write_be(midi_track, uint8_t{0x2F});
		write_be(midi_track, uint8_t{0x00});
	}

	uint32_t track_size = midi_track.size() - MIDI_TRACK_HEADER_SIZE;
	size_t final_track_data_size = midi_track.size();
	midi_track.resize(track_size_offset);
	write_be(midi_track, track_size);
	// midi_track now contains header + size, need to append rest of data if track_size_offset technique allows
	// This resize method is tricky; simpler might be to store data separately then combine.
	// Let's assume the buffer manipulation works as intended by the original author's potential technique
	// Or reconstruct:
	std::vector<uint8_t> final_midi_track;
	final_midi_track.reserve(MIDI_TRACK_HEADER_SIZE + track_size);
	write_be(final_midi_track, uint32_t{'MTrk'});
	write_be(final_midi_track, track_size);
	// Append the actual track data (which starts *after* the placeholder in the original midi_track buffer)
	final_midi_track.insert(final_midi_track.end(), midi_track.begin() + track_size_offset + 4, midi_track.begin() + final_track_data_size);

	std::vector<uint8_t> midi_output;
	midi_output.reserve(midi_header.size() + final_midi_track.size());
	midi_output.insert(midi_output.end(), midi_header.begin(), midi_header.end());
	midi_output.insert(midi_output.end(), final_midi_track.begin(), final_midi_track.end());

	return midi_output;
}

//
// Play MIDI data using libADLMIDI
//
void PlayMIDI(const std::vector<uint8_t> &midiData, bool isTransient)
{
	HRESULT hr;
	IMMDeviceEnumerator *pEnumerator = nullptr;
	IMMDevice *pDevice = nullptr;
	IAudioClient *pAudioClient = nullptr;
	IAudioRenderClient *pRenderClient = nullptr;

	hr = CoInitialize(nullptr);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: CoInitialize failed, hr=0x" << std::hex << hr << std::endl;
		return;
	}

	hr = CoCreateInstance(__uuidof(MMDeviceEnumerator), nullptr, CLSCTX_ALL,
						  __uuidof(IMMDeviceEnumerator), (void **)&pEnumerator);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: CoCreateInstance failed, hr=0x" << std::hex << hr << std::endl;
		CoUninitialize();
		return;
	}

	hr = pEnumerator->GetDefaultAudioEndpoint(eRender, eMultimedia, &pDevice);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: GetDefaultAudioEndpoint failed, hr=0x" << std::hex << hr << std::endl;
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	hr = pDevice->Activate(__uuidof(IAudioClient), CLSCTX_ALL, nullptr, (void **)&pAudioClient);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: Activate audio client failed, hr=0x" << std::hex << hr << std::endl;
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	WAVEFORMATEX wfx = {0};
	wfx.wFormatTag = WAVE_FORMAT_PCM;
	wfx.nChannels = 2; // Stereo
	wfx.nSamplesPerSec = 44100;
	wfx.wBitsPerSample = 16;
	wfx.nBlockAlign = wfx.nChannels * wfx.wBitsPerSample / 8;
	wfx.nAvgBytesPerSec = wfx.nSamplesPerSec * wfx.nBlockAlign;

	hr = pAudioClient->Initialize(AUDCLNT_SHAREMODE_SHARED, 0, 500000, 0, &wfx, nullptr);
	if (FAILED(hr))
	{
		std::cerr << "Falling back to 48 kHz" << std::endl;
		wfx.nSamplesPerSec = 48000;
		wfx.nBlockAlign = wfx.nChannels * wfx.wBitsPerSample / 8;
		wfx.nAvgBytesPerSec = wfx.nSamplesPerSec * wfx.nBlockAlign;
		hr = pAudioClient->Initialize(AUDCLNT_SHAREMODE_SHARED, 0, 500000, 0, &wfx, nullptr);
		if (FAILED(hr))
		{
			std::cerr << "ERROR: Audio client Initialize failed with 48 kHz, hr=0x" << std::hex << hr << std::endl;
			pAudioClient->Release();
			pDevice->Release();
			pEnumerator->Release();
			CoUninitialize();
			return;
		}
	}

	int actualSampleRate = wfx.nSamplesPerSec;
	struct ADL_MIDIPlayer *player = adl_init(actualSampleRate);
	if (!player)
	{
		std::cerr << "ERROR: Failed to initialize libADLMIDI." << std::endl;
		pAudioClient->Release();
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	// Configure emulation mode
	if (state.music_mode == "opl2")
	{
		adl_setNumChips(player, 1);
		adl_setNumFourOpsChn(player, 0);
	}
	else if (state.music_mode == "dual_opl2")
	{
		adl_setNumChips(player, 2);
		adl_setNumFourOpsChn(player, 0);
	}
	else if (state.music_mode == "opl3")
	{
		adl_setNumChips(player, 1);
		adl_setNumFourOpsChn(player, 6);
	}
	else
	{
		std::cerr << "WARNING: Unknown music mode '" << state.music_mode << "', defaulting to opl3." << std::endl;
		adl_setNumChips(player, 1);
		adl_setNumFourOpsChn(player, 6);
	}

	if (adl_openData(player, midiData.data(), static_cast<unsigned long>(midiData.size())) < 0)
	{
		std::cerr << "ERROR: Failed to load MIDI data in libADLMIDI." << std::endl;
		adl_close(player);
		pAudioClient->Release();
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	// Position handling
	if (isTransient)
	{
		adl_positionRewind(player); // Start transient from beginning
	}
	else
	{
		adl_positionSeek(player, state.main_song_position); // Resume main song
	}

	hr = pAudioClient->GetService(__uuidof(IAudioRenderClient), (void **)&pRenderClient);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: GetService for IAudioRenderClient failed, hr=0x" << std::hex << hr << std::endl;
		adl_close(player);
		pAudioClient->Release();
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	UINT32 bufferFrameCount;
	hr = pAudioClient->GetBufferSize(&bufferFrameCount);
	if (FAILED(hr))
	{
		std::cerr << "ERROR: GetBufferSize failed, hr=0x" << std::hex << hr << std::endl;
		pRenderClient->Release();
		adl_close(player);
		pAudioClient->Release();
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	hr = pAudioClient->Start();
	if (FAILED(hr))
	{
		std::cerr << "ERROR: Audio client Start failed, hr=0x" << std::hex << hr << std::endl;
		pRenderClient->Release();
		adl_close(player);
		pAudioClient->Release();
		pDevice->Release();
		pEnumerator->Release();
		CoUninitialize();
		return;
	}

	// Playback loop with fade-in for main song after first play
	state.music_playing = true;
	const float gain = 6.0f;
	const int fadeSamples = static_cast<int>(0.5 * actualSampleRate); // 500ms fade-in
	int fadeCounter = 0;
	bool fadingIn = !isTransient && state.hasPlayedFirstSong; // Fade-in only for main songs after first play

	while (state.music_playing)
	{
		UINT32 padding;
		hr = pAudioClient->GetCurrentPadding(&padding);
		if (FAILED(hr))
			break;

		UINT32 framesAvailable = bufferFrameCount - padding;
		if (framesAvailable == 0)
		{
			std::this_thread::sleep_for(std::chrono::milliseconds(10));
			continue;
		}

		BYTE *pData;
		hr = pRenderClient->GetBuffer(framesAvailable, &pData);
		if (FAILED(hr))
			break;

		int samples = adl_play(player, framesAvailable * 2, (short *)pData);
		if (samples <= 0)
			break; // End of song

		// Apply gain, volume, and fade-in if applicable
		short *samplesPtr = (short *)pData;
		for (int i = 0; i < samples; i++)
		{
			float sample = static_cast<float>(samplesPtr[i]) * gain * state.music_volume;
			if (fadingIn && fadeCounter < fadeSamples)
			{
				float fadeFactor = static_cast<float>(fadeCounter) / fadeSamples;
				sample *= fadeFactor;
				fadeCounter++;
			}
			samplesPtr[i] = static_cast<short>(std::clamp(sample, -32768.0f, 32767.0f));
		}

		hr = pRenderClient->ReleaseBuffer(framesAvailable, 0);
		if (FAILED(hr))
			break;
	}

	// Save position if main song is paused
	if (!isTransient)
	{
		state.main_song_position = adl_positionTell(player);
		state.hasPlayedFirstSong = true; // Mark that a main song has played
	}

	// Cleanup
	state.music_playing = false;
	pAudioClient->Stop();
	pRenderClient->Release();
	adl_close(player);
	pAudioClient->Release();
	pDevice->Release();
	pEnumerator->Release();
	CoUninitialize();
}

//
// Initialize and play a music track in a non-blocking way
//
void xmiPlay(const std::string &songName, bool isTransient)
{
	bool midi_enabled = config.value("midiEnabled", true);
	int midi_volume = config.value("midiVolume", 100);
	state.music_volume = std::clamp(midi_volume / 100.0f, 0.0f, 1.0f);
	state.music_mode = config.value("midiMode", "opl3");

	if (midi_enabled)
	{
		// Stop any currently playing music
		state.music_playing = false;
		if (state.music_thread.joinable())
		{
			state.music_thread.join();
		}

		// Set song names and position
		if (isTransient)
		{
			state.transient_song = songName;
		}
		else
		{
			if (songName != state.current_song)
			{
				state.current_song = songName;
				state.main_song_position = 0.0; // Reset position only for new main songs
			}
			// Else, resuming the same song, so keep state.main_song_position as is
		}

		// Start new music thread
		auto play_music = [songName, isTransient]()
		{
			auto xmiFiles = parseRLFile("XMI.RL");
			for (auto &entry : xmiFiles)
			{
				entry.filename.erase(entry.filename.find_last_of('.'));
			}

			auto song = std::find_if(xmiFiles.begin(), xmiFiles.end(),
									 [&songName](const RLEntry &entry)
									 { return entry.filename == songName; });

			if (song != xmiFiles.end())
			{
				auto midiData = xmiConverter(*song);
				// DEBUG
				std::ofstream midiFile("badsong.mid", std::ios::binary);
				midiFile.write(reinterpret_cast<const char *>(midiData.data()), midiData.size());
				midiFile.close();

				PlayMIDI(midiData, isTransient);
			}
			else
			{
				std::cerr << "ERROR: XMI file '" << songName << "' not found." << std::endl;
			}
		};
		state.music_thread = std::thread(play_music);
	}
}

//
// DEBUG
//
std::vector<uint8_t> _xmiConverter(const RLEntry &song)
{
	struct NOEVENTS
	{
		unsigned delta;
		std::array<unsigned char, 3> off;
	};

	std::array<NOEVENTS, 1000> off_events{{{0xFFFFFFFFL, {0, 0, 0}}}};

	auto comp_events = [](const NOEVENTS &a, const NOEVENTS &b)
	{
		return a.delta < b.delta;
	};

	std::array<unsigned char, 18> midiheader = {'M', 'T', 'h', 'd', 0, 0, 0, 6, 0, 0, 0, 1, 0, 60, 'M', 'T', 'r', 'k'};

	constexpr unsigned long DEFAULT_TEMPO = 120UL;
	constexpr unsigned long XMI_FREQ = 120UL;
	constexpr unsigned long DEFAULT_TIMEBASE = (XMI_FREQ * 60UL / DEFAULT_TEMPO);
	constexpr unsigned long DEFAULT_QN = (60UL * 1000000UL / DEFAULT_TEMPO);

	unsigned short timebase = 960;
	unsigned long qnlen = DEFAULT_QN;

	//
	// Find the XMI file in XMI.GJD
	//
	std::ifstream xmiData("XMI.GJD", std::ios::binary | std::ios::ate);
	std::vector<uint8_t> xmiFile(song.length);
	xmiData.seekg(song.offset);
	xmiData.read(reinterpret_cast<char *>(xmiFile.data()), song.length);

	unsigned char *cur = xmiFile.data();

	cur += 4 * 12 + 2;
	unsigned lTIMB = _byteswap_ulong(*reinterpret_cast<unsigned *>(cur));
	cur += 4;

	for (unsigned i = 0; i < lTIMB; i += 2)
	{
		cur += 2;
	}

	if (!std::memcmp(cur, "RBRN", 4))
	{
		cur += 8;
		unsigned short nBranch = *reinterpret_cast<unsigned short *>(cur);
		cur += 2;

		for (unsigned i = 0; i < nBranch; i++)
		{
			cur += 6;
		}
	}

	cur += 4;
	unsigned lEVNT = _byteswap_ulong(*reinterpret_cast<unsigned *>(cur));
	cur += 4;

	std::vector<unsigned char> midi_decode(xmiFile.size() * 2);

	unsigned char *dcur = midi_decode.data();

	int next_is_delta = 1;
	unsigned char *st = cur;
	unsigned oevents = 0;
	while (cur - st < lEVNT)
	{
		if (*cur < 0x80)
		{
			unsigned delay = 0;
			while (*cur == 0x7F)
			{
				delay += *cur++;
			}
			delay += *cur++;

			while (delay > off_events[0].delta)
			{
				unsigned no_delta = off_events[0].delta;
				unsigned tdelay = no_delta & 0x7F;

				while ((no_delta >>= 7))
				{
					tdelay <<= 8;
					tdelay |= (no_delta & 0x7F) | 0x80;
				}

				while (1)
				{
					*dcur++ = tdelay & 0xFF;
					if (tdelay & 0x80)
					{
						tdelay >>= 8;
					}
					else
					{
						break;
					}
				}
				*dcur++ = off_events[0].off[0] & 0x8F;
				*dcur++ = off_events[0].off[1];
				*dcur++ = 0x7F;

				delay -= off_events[0].delta;
				for (unsigned i = 1; i < oevents; i++)
				{
					off_events[i].delta -= off_events[0].delta;
				}
				off_events[0].delta = 0xFFFFFFFFL;

				std::sort(off_events.begin(), off_events.begin() + oevents, comp_events);

				oevents--;
			}

			for (unsigned i = 0; i < oevents; i++)
			{
				off_events[i].delta -= delay;
			}

			unsigned tdelay = delay & 0x7F;

			while ((delay >>= 7))
			{
				tdelay <<= 8;
				tdelay |= (delay & 0x7F) | 0x80;
			}

			while (1)
			{
				*dcur++ = tdelay & 0xFF;
				if (tdelay & 0x80)
				{
					tdelay >>= 8;
				}
				else
				{
					break;
				}
			}
			next_is_delta = 0;
		}
		else
		{
			if (next_is_delta)
			{
				if (*cur >= 0x80)
				{
					*dcur++ = 0;
				}
			}

			next_is_delta = 1;
			if (*cur == 0xFF)
			{
				if (*(cur + 1) == 0x2F)
				{
					for (unsigned i = 0; i < oevents; i++)
					{
						*dcur++ = off_events[i].off[0] & 0x8F;
						*dcur++ = off_events[i].off[1];
						*dcur++ = 0x7F;
						*dcur++ = 0;
					}
					*dcur++ = *cur++;
					*dcur++ = *cur++;
					*dcur++ = 0;

					break;
				}
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				unsigned textlen = *cur + 1;
				while (textlen--)
				{
					*dcur++ = *cur++;
				}
			}
			else if (0x80 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			else if (0x90 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				unsigned delta = *cur & 0x7F;

				while (*cur++ > 0x80)
				{
					delta <<= 7;
					delta += *cur;
				}

				off_events[oevents].delta = delta;
				off_events[oevents].off[0] = *(dcur - 3);
				off_events[oevents].off[1] = *(dcur - 2);

				oevents++;

				std::sort(std::begin(off_events), std::begin(off_events) + oevents, comp_events);
			}
			// Key pressure
			else if (0xA0 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			// Control Change
			else if (0xB0 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			// Program Change
			else if (0xC0 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			// Channel Pressure
			else if (0xD0 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			// Pitch Bend
			else if (0xE0 == (*cur & 0xF0))
			{
				*dcur++ = *cur++;
				*dcur++ = *cur++;
				*dcur++ = *cur++;
			}
			else
			{
				cur++;
			}
		}
	}

	std::vector<unsigned char> midi_write(xmiFile.size() * 2);

	unsigned char *tcur = midi_write.data();

	unsigned char *pos = midi_decode.data();

	while (pos < dcur)
	{
		// first delta-time
		unsigned delta = 0;
		while (*pos & 0x80)
		{
			delta += *pos++ & 0x7F;
			delta <<= 7;
		}
		delta += *pos++ & 0x7F;

		// change delta here!!
		double factor = (double)timebase * DEFAULT_QN / ((double)qnlen * DEFAULT_TIMEBASE);
		delta = static_cast<unsigned>((double)delta * factor + 0.5);

		unsigned tdelta = delta & 0x7F;
		while ((delta >>= 7))
		{
			tdelta <<= 8;
			tdelta |= (delta & 0x7F) | 0x80;
		}
		while (1)
		{
			*tcur++ = tdelta & 0xFF;
			if (tdelta & 0x80)
			{
				tdelta >>= 8;
			}
			else
			{
				break;
			}
		}
		// last -  event

		// Note Off
		if (0x80 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Note On
		else if (0x90 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Key Pressure
		else if (0xA0 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Control Change
		else if (0xB0 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Program Change
		else if (0xC0 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Channel Pressure
		else if (0xD0 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		// Pitch Bend
		else if (0xE0 == (*pos & 0xF0))
		{
			*tcur++ = *pos++;
			*tcur++ = *pos++;
			*tcur++ = *pos++;
		}
		else if (0xF0 == *pos)
		{
			unsigned exlen = 0;
			*tcur++ = *pos++;
			while (*pos < 0)
			{
				exlen += *pos & 0x7F;
				exlen <<= 7;
				*tcur++ = *pos++;
			}
			exlen += *pos & 0x7F;
			*tcur++ = *pos++;
			while (exlen--)
			{
				*tcur++ = *pos++;
			}
		}
		else if (0xF7 == *pos)
		{
			unsigned exlen = 0;
			*tcur++ = *pos++;
			while (*pos < 0)
			{
				exlen += *pos & 0x7F;
				exlen <<= 7;
				*tcur++ = *pos++;
			}
			exlen += *pos & 0x7F;
			*tcur++ = *pos++;
			while (exlen--)
			{
				*tcur++ = *pos++;
			}
		}
		else if (0xFF == *pos)
		{
			*tcur++ = *pos++;
			if (0x51 == *pos)
			{
				*tcur++ = *pos++;
				*tcur++ = *pos++;
				qnlen = (*(unsigned char *)(pos) << 16) + (*(unsigned char *)(pos + 1) << 8) + *(unsigned char *)(pos + 2);
				*tcur++ = *pos++;
				*tcur++ = *pos++;
				*tcur++ = *pos++;
			}
			else
			{
				*tcur++ = *pos++;
				unsigned textlen = *pos;
				*tcur++ = *pos++;
				while (textlen--)
				{
					*tcur++ = *pos++;
				}
			}
		}
	}

	ptrdiff_t tlen = tcur - midi_write.data();

	//
	// Output
	//
	std::vector<uint8_t> midiData;

	unsigned short swappedTimebase = _byteswap_ushort(timebase); // Little Endian
	midiheader[12] = static_cast<unsigned char>(swappedTimebase & 0xFF);
	midiheader[13] = static_cast<unsigned char>(swappedTimebase >> 8);

	midiData.insert(midiData.end(), midiheader.begin(), midiheader.end());

	unsigned long bs_tlen = _byteswap_ulong(static_cast<unsigned long>(tlen));
	midiData.insert(midiData.end(), reinterpret_cast<const char *>(&bs_tlen), reinterpret_cast<const char *>(&bs_tlen) + sizeof(unsigned));

	midiData.insert(midiData.end(), midi_write.begin(), midi_write.end());

	return midiData;
}